# By Steinbeard
activity_bar_mitzvah = {
	is_shown = {
		# TODO can I remove the landed requirement?
		highest_held_title_tier > tier_barony
		is_landed = yes
		faith = {
			OR = {
				has_doctrine = temple_authority_rabbinic_doctrine
				has_doctrine = temple_authority_toric_doctrine
			}
		}
		OR = {
			any_child = {
				is_alive = yes
				age <= 13
			}
			age <= 13
		}

		trigger_if = {
			limit = {
				is_ai = yes
			}
			is_at_war = no
			short_term_gold > bar_mitzvah_activity_cost
		}
	}

	can_start_showing_failures_only = {
		is_available = yes
		trigger_if = {
			limit = {
				is_ai = no
			}
			custom_tooltop = {
				#TODO define these values
				text = has_someone_selected_to_bar_mitzvah
				exists = scope:child_to_bar_mitzvah
			}
		}
		trigger_if = {
			limit = {
				is_ai = yes
			}
			# TODO define this value
			has_available_bar_mitzvah_target = yes
		}
	}

	can_start = {
		custom_tooltip = {
			text = has_someone_to_bar_mitzvah_tt
			has_available_bar_mitzvah_target = yes
		}
	}

	is_valid = {
		scope:host = {
			is_alive = yes
			is_imprisoned = no
			is_landed = yes
		}
		# Bar Mitzvah target needs to be alive too
		scope:activity.special_guest:bar_mitzvah_recipient = {
			is_alive = yes
			is_imprisoned = no
		}
		# If no one shows up
		trigger_if = {
			limit = {
				is_current_phase_active = yes
			}
			has_attending_activity_guests = yes
		}
	}

	on_invalidated = {
		scope:host ?= { save_scope_as = previous_host }
		scope:activity.special_guest:bar_mitzvah_recipient ?= { save_scope_as = bar_mitzvah_recipient }
		# Set up the refund
		scope:previous_host = {
			set_variable = {
				name = bar_mitzvah_gold_recoup_value
				value = {
					value = 0
					# For a base, add the total pot spent.
					add = scope:activity.var:bar_mitzvah_refund_pot
					# Then revise it down a little to account for some costs being irredeemable.
					multiply = 0.75
				}
			} 
		}

		# The recipient was taken prisoner along the way
		if = {
			limit = {
				scope:bar_mitzvah_recipient ?= { is_imprisoned = yes }
			}
			scope:bar_mitzvah_recipient = { trigger_event = bar_mitzvah.0920 }
			every_attending_character = {
				limit = {
					NOT = { this = scope:bar_mitzvah_recipient }
				}
				trigger_event = bar_mitzvah.0921
			}
		}

		# The activity failed because the recipient died
		else_if = {
			limit = {
				scope:activity.special_guest:bar_mitzvah_recipient = {
					is_alive = no
				}
			}
			if = {
				limit = {
					scope:previous_host = {
						is_alive = yes
					}
				}
				scope:previous_host = {
					# Set up the refund
					set_variable = {
						name = bar_mitzvah_gold_recoup_value
						value = {
							value = 0
							# For a base, add the total pot spent.
							add = scope:activity.var:bar_mitzvah_refund_pot
							# Then revise it down a little to account for some costs being irredeemable.
							multiply = 0.75
						}
					}
				}
			}
			# The host was the bar mitzvah recipient and died
			else = {
				scope:previous_host.player_heir = {
					# Set up the refund
					set_variable = {
						name = bar_mitzvah_gold_recoup_value
						value = {
							value = 0
							# For a base, add the total pot spent.
							add = scope:activity.var:bar_mitzvah_refund_pot
							# Then revise it down a little to account for some costs being irredeemable.
							multiply = 0.75
						}
					}
				}
			}
			# Special event for surviving parents
			scope:bar_mitzvah_recipient = {
				every_parent = {
					trigger_event = bar_mitzvah.0910
				}
			}
			# Event for all other attending characters, including the host if not a parent
			scope:activity = {
				every_attending_character = {
					limit = {
						NOR = {
							this = scope:bar_mitzvah_recipient
							any_child = {
								NOT = { this = scope:bar_mitzvah_recipient }
							}
						}
					}
					trigger_event = bar_mitzvah.0900
				}
			}
			# If the host/spouse died, notify the heir if somewhere else
			if = {
				limit = {
					scope:previous_host = {
						is_alive = no
						player_heir = {
							NOT = { involved_activity ?= scope:activity }
						}
					}
				}
				scope:previous_host.player_heir = {
					trigger_event = bar_mitzvah.0915
				}
			}
		}
	}

	##############
	# PARAMETERS
	##############
	is_grand_activity = no
	is_single_location = yes

	province_filter = realm
	ai_province_filter = capital

	is_location_valid = {
		has_holding = yes
	}

	max_province_icons = 5

	cooldown = { years = standard_bar_mitzvah_cooldown_time }

	province_description = {
		desc = activity_bar_mitzvah_province_desc
		# Triple good / +++
		triggered_desc = {
			# Is Jerusalem
			trigger = {
				barony = b_jerusalem
			}
			desc = activity_bar_mitzvah_jerusalem_desc
		}
		triggered_desc = {
			trigger = {
				barony = {
					is_holy_site_of = scope:host.faith
				}
				has_holy_building = yes
			}
			desc = activity_bar_mitzvah_major_religious_building_desc
		}
		# Double good / ++
		triggered_desc = {
			trigger = {
				barony = {
					is_holy_site_of = scope:host.faith
				}
			}
			desc = activity_bar_mitzvah_holy_site
		}
		# Good / +
		triggered_desc = {
			trigger = {
				has_building_or_higher = temple_01
				faith.religion = scope:host.faith.religion
			}
			desc = activity_bar_mitzvah_temple_desc
		}
	}

	province_score = {
		value = 0
		# S-Tier ++++
		if = {
			limit = {
				barony = b_jerusalem
			}
			add = 125
		}
		# Triple good / +++
		if = {
			limit = {
				barony = {
					is_holy_site_of = scope:host.faith
				}
				has_holy_building = yes
			}
			add = 100
		}
		# Double good / ++
		if = {
			limit = {
				barony = {
					is_holy_site_of = scope:host.faith
				}
			}
			add = 50
		}
		# Good / +
		if = {
			limit = {
				has_building_or_higher = temple_01
				faith.religion = scope:host.faith.religion
			}
			add = 25
		}
	}

	ai_will_do = {
		add = {
			value = 30
			desc = "Base"
		}
		add = {
			value = ai_greed
			multiply = -0.25
			desc = "ai_greed"
		}
		add = {
			value = ai_sociability
			multiply = 0.5
			desc = "ai_sociability"
		}
		if = {
			limit = {
				ai_energy < 0
			}
			add = {
				add = ai_energy
				desc = "ai_energy"
			}
		}
		# TODO Add modifiers based on traits
		if = {
			limit = { ai_has_warlike_personality = yes }
			add = {
				value = -30
				desc = "Warlike"
			}
		}
		# Plague
		if = {
			limit = {
				any_held_title = {
					tier = tier_county
					any_county_province = {
						any_province_epidemic = {
							count >= 1
							outbreak_intensity < apocalyptic
						}
					}
				}
				would_follow_social_distancing_value >= -1
			}
			add = {
				value = -60
				desc = "Plague in Domain"
			}
		}
		else_if = {
			limit = {
				any_realm_county = {
					any_county_province = {
						any_province_epidemic = {
							count >= 1
							outbreak_intensity < apocalyptic
						}
					}
				}
				would_follow_social_distancing_value >= -1
			}
			add = {
				value = -20
				desc = "Plague in Top Realm"
			}
		}
		if = {
    	    limit = {
    	        any_held_title = {
					tier = tier_county
    	            any_county_province = {
    	                any_province_epidemic = {
    	                    count >= 1
    	                    outbreak_intensity = apocalyptic
    	                }
    	            }
    	        }
    	    }
    	    add = {
    	        value = -200
    	        desc = "Apocalyptic Plague in Domain"
    	    }
    	}
    	else_if = {
    	    limit = {
    	        any_held_title = {
					tier = tier_county
    	            any_county_province = {
    	                any_province_epidemic = {
    	                    count >= 1
    	                    outbreak_intensity = apocalyptic
    	                }
    	            }
    	        }
    	    }
    	    add = {
    	        value = -40
    	        desc = "Apocalyptic Plague in Top Realm"
    	    }
    	}
	}

	###################
	# GUEST HANDLING
	###################

	max_guests = 40

	guest_invite_rules = {
		rules = {
			1 = activity_invite_rule_hof
			2 = activity_invite_rule_rivals
			2 = activity_invite_rule_extended_family
			3 = activity_invite_rule_vassals_children

			6 = activity_invite_mp
		}
		defaults = {
			2 = activity_invite_rule_liege
			2 = activity_invite_rule_siblings
			2 = activity_invite_rule_vassals
			1 = activity_invite_rule_friends
			1 = activity_invite_rule_crushes
			1 = activity_invite_rule_personal_scheme_targets
			2 = activity_invite_rule_powerful_vassals_children
			2 = activity_invite_rule_fellow_vassals
			3 = activity_invite_rule_fellow_vassals_children
		}
	}

	
	can_be_activity_guest = {
		is_adult = yes
		is_healthy = yes
		in_diplomatic_range = scope:host
	}

	host_intents = {
		# Hosting is stressful
		intents= { prestige_intent legitimacy_intent faith_intent learning_intent diplomatic_intent }
		default = learning_intent
	}

	guest_intents = {
		intents = { reduce_stress_intent prestige_intent faith_intent learning_intent diplomatic_intent }
		default = reduce_stress_intent
	}

	guest_join_chance = {
		base = 10
		base_activity_modifier = yes

		activity_guest_shared_ai_accept_modifier = yes
		activity_guest_bar_mitzvah_ai_accept_modifier = yes
	}

	special_guests = {
		bar_mitzvah_recipient = {
			is_required = yes

		}
	}
}
